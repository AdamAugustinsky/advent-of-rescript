// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Core__Int from "@rescript/core/src/Core__Int.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

var input = Fs.readFileSync("./src/day1/input", "utf8");

var lines = input.split("\n");

function find_first(str, reverse) {
  var _start = reverse ? str.length : 0;
  var _pointer = reverse ? str.length - 1 | 0 : 1;
  while(true) {
    var pointer = _pointer;
    var start = _start;
    var end_of_loop = reverse ? 0 : str.length;
    var increment = reverse ? -1 : 1;
    var substring = reverse ? str.substring(pointer, start) : str.substring(start, pointer);
    switch (substring) {
      case "8" :
      case "eight" :
          return "8";
      case "5" :
      case "five" :
          return "5";
      case "4" :
      case "four" :
          return "4";
      case "9" :
      case "nine" :
          return "9";
      case "1" :
      case "one" :
          return "1";
      case "7" :
      case "seven" :
          return "7";
      case "6" :
      case "six" :
          return "6";
      case "3" :
      case "three" :
          return "3";
      case "2" :
      case "two" :
          return "2";
      default:
        if (start === end_of_loop && pointer === end_of_loop) {
          return ;
        }
        if (pointer === end_of_loop) {
          _pointer = reverse ? str.length : 0;
          _start = start + increment | 0;
          continue ;
        }
        _pointer = pointer + increment | 0;
        continue ;
    }
  };
}

var res = Core__Array.reduce(lines, 0, (function (acc, line) {
        var first_digit = find_first(line, false);
        var last_digit = find_first(line, true);
        var first_and_last = Core__Option.getOr(first_digit, "") + Core__Option.getOr(last_digit, "");
        var num = Core__Option.getOr(Core__Int.fromString(undefined, first_and_last), 0);
        return acc + num | 0;
      }));

console.log(res);

export {
  input ,
  lines ,
  find_first ,
  res ,
}
/* input Not a pure module */
