// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Fs from "fs";
import * as Core__Int from "@rescript/core/src/Core__Int.bs.js";
import * as Core__Array from "@rescript/core/src/Core__Array.bs.js";
import * as Core__Option from "@rescript/core/src/Core__Option.bs.js";

var input = Fs.readFileSync("./src/day2/input", "utf8");

var lines = input.split("\n");

function sum_boxes(boxes) {
  return Core__Array.reduce(boxes, 0, (function (acc, box) {
                var box$1 = box.trim().split(" ");
                return acc + Core__Option.getOr(Core__Int.fromString(undefined, Core__Option.getOr(box$1[0], "")), 0) | 0;
              }));
}

var game_ids_sum = Core__Array.reduce(lines, 0, (function (acc, line) {
        var split_line = line.split(":");
        var game_id = Core__Option.getExn(split_line[0]).replace("Game ", "");
        var boxes = Core__Option.getOr(split_line[1], "").replace(/;/g, ",").split(",");
        var valid_boxes = boxes.map(function (box) {
              var play = box.split(",");
              var green_sum = sum_boxes(play.filter(function (p) {
                        return p.includes("green");
                      }));
              var blue_sum = sum_boxes(play.filter(function (p) {
                        return p.includes("blue");
                      }));
              var red_sum = sum_boxes(play.filter(function (p) {
                        return p.includes("red");
                      }));
              return !(green_sum > 13 || blue_sum > 14 || red_sum > 12);
            });
        if (Core__Array.reduce(valid_boxes, true, (function (acc, valid) {
                  return acc ? valid : false;
                }))) {
          return acc + Core__Option.getOr(Core__Int.fromString(undefined, game_id), 0) | 0;
        } else {
          return acc + 0 | 0;
        }
      }));

var Part1 = {
  input: input,
  lines: lines,
  max_red: 12,
  max_green: 13,
  max_blue: 14,
  sum_boxes: sum_boxes,
  game_ids_sum: game_ids_sum
};

var input$1 = Fs.readFileSync("./src/day2/input", "utf8");

var lines$1 = input$1.split("\n");

function get_max_from_boxes(boxes) {
  var num_from_box = boxes.map(function (box) {
        return Core__Option.getOr(Core__Int.fromString(undefined, Core__Option.getOr(box.trim().split(" ").at(0), "")), 0);
      });
  return Core__Array.reduce(num_from_box, 0, (function (previous, current) {
                if (current > previous) {
                  return current;
                } else {
                  return previous;
                }
              }));
}

var games_power = Core__Array.reduce(lines$1, 0, (function (acc, line) {
        var split_line = line.split(":");
        var boxes = Core__Option.getOr(split_line[1], "").replace(/;/g, ",").split(",");
        var max_green = get_max_from_boxes(boxes.filter(function (__x) {
                  return __x.includes("green");
                }));
        var max_blue = get_max_from_boxes(boxes.filter(function (__x) {
                  return __x.includes("blue");
                }));
        var max_red = get_max_from_boxes(boxes.filter(function (__x) {
                  return __x.includes("red");
                }));
        return acc + Math.imul(Math.imul(max_green, max_blue), max_red) | 0;
      }));

var Part2 = {
  input: input$1,
  lines: lines$1,
  get_max_from_boxes: get_max_from_boxes,
  games_power: games_power
};

console.log("part 1", game_ids_sum);

console.log("part 2", games_power);

export {
  Part1 ,
  Part2 ,
}
/* input Not a pure module */
